// 문제 : 고무오리, 고무2오리, 흰오리, 청둥오리 객체를 만들고 날게 해주세요. 단 고무오리 계열은 날 수 없습니다.
// 조건 : 메서드는 중복될 수 없습니다.
// 정답
/*
만약에 추후에 로봇오리가 추가로 구현되어야 한다고 가정해 보겠습니다.
로봇오리는 오리처럼 날아야 하고 고무오리처럼 수영해야 한다고 합니다.
즉 로봇오리 클래스는 오리 클래스의 `날다` 메서드와 고무오리 클래스의 `수영하다` 메서드를 동시에 가져야 하는 상황입니다.
하지만 자바에서는 다중상속이 금지되어 있습니다.

이 때 로봇오리 클래스가 오리를 상속받는 다면 `수영하다` 메서드를 오버라이드(메서드 재정의) 해야 합니다. 바로 이 때, 고무오리 클래스에 있는 `수영하다` 메서드와 똑같은 `수영하다` 메서드가 로봇오리 클래스에도 생겨버리고 맙니다.

이 때 로봇오리 클래스가 고무오리를 상속받는 다면 `날다` 메서드를 오버라이드(메서드 재정의) 해야 합니다. 바로 이 때, 오리 클래스에 있는 `날다` 메서드와 똑같은 `날다` 메서드가 로봇오리 클래스에도 생겨버리고 맙니다.

위 2가지 상황에서 똑같은 소스코드(메서드)가 여러 클래스에 존재하는 것을 중복라고 하는데, 상속만 가지고 중복을 제거하다보면 단순한 문제는 쉽게 풀리지만 언젠가는 위와 같은 상황을 피할 수 없게 됩니다.
*/

class Main {
  public static void main(String[] args) {
    청둥오리 a청둥오리 = new 청둥오리();
    a청둥오리.날다();
    
    흰오리 a흰오리 = new 흰오리();
    a흰오리.날다();
    
    고무오리 a고무오리 = new 고무오리();
    a고무오리.날다();
    
    고무2오리 a고무2오리 = new 고무2오리();
    a고무2오리.날다();
  }
}

class 오리 {
  void 날다() {
    System.out.println("날개로 날아갑니다.");
  }
}

class 고무오리 extends 오리 {
  void 날다() {
    System.out.println("저는 못 날아요. ㅜㅠ");
  }
}
class 고무2오리 extends 고무오리 { }
class 흰오리 extends 오리 { }
class 청둥오리 extends 오리 { }